@using System.Net
@inject ILogger<CustomError> Logger

<MudDialog Visible="true">
    <TitleContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6" Color="Color.Error">@StatusCode</MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudPaper Elevation="0" Class="pa-4 rounded-lg">
            <MudStack AlignItems="AlignItems.Center" Spacing="4">
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Class="my-2">
                    <MudText Typo="Typo.subtitle1" Class="mb-2">@Message</MudText>
                    <MudText Typo="Typo.body2">For more information, contact your system administrator</MudText>
                </MudAlert>
                
                <MudPaper Elevation="0" Width="100%" Class="d-flex justify-space-between align-center px-2">
                    <MudText Typo="Typo.caption" Color="Color.Secondary">@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</MudText>
                    <MudButton 
                        Variant="Variant.Text" 
                        Color="Color.Primary" 
                        EndIcon="@(ShowStackTrace ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" 
                        OnClick="@(() => ShowStackTrace = !ShowStackTrace)">
                        @(ShowStackTrace ? "Hide Details" : "Show Details")
                    </MudButton>
                </MudPaper>
                
                @if (ShowStackTrace)
                {
                    <MudExpansionPanel Class="mt-2 w-100" Expanded="true">
                        <TitleContent>
                            <MudText Typo="Typo.subtitle2">Stack Trace</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudText Typo="Typo.body2" Style="white-space: pre-wrap; overflow-x: auto; max-height: 200px;">@StackTrace</MudText>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudStack>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton 
            Variant="Variant.Filled" 
            Color="Color.Primary" 
            StartIcon="@Icons.Material.Filled.Refresh" 
            OnClick="OnRefresh">
            @ConstantString.Refresh
        </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;

    [EditorRequired] [Parameter] public Exception Exception { get; set; } = default!;

    private string? Message { get; set; }
    private bool ShowStackTrace { get; set; }
    private string? StackTrace { get; set; }
    private string? StatusCode { get; set; } = HttpStatusCode.InternalServerError.ToString();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;
        var userName = state.User.GetUserName();

        switch (Exception)
        {
            case ServerException e:
                StatusCode = e.StatusCode.ToString();
                if (e.ErrorMessages is not null)
                {
                    Message = string.Join(", ", e.ErrorMessages.ToArray());
                }

                break;
            default:
                if (Exception.InnerException != null)
                {
                    while (Exception.InnerException != null)
                    {
                        Exception = Exception.InnerException;
                    }
                }

                Message = Exception.Message;
                break;
        }

        StackTrace = Exception.StackTrace;
        Logger.LogError(Exception, "{Message}. request url: {@url} {@UserName}", Message, Navigation.Uri, userName);
    }

    private void OnRefresh()
    {
        Navigation.NavigateTo(Navigation.Uri, true);
    }
}